plugins {
	id 'java'
	id 'eclipse'
	id 'java-library'
}

repositories {
 	mavenCentral()
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(15)
	}
   	modularity.inferModulePath.set(true)
}

test {
    useJUnitPlatform()
}

dependencies {
	implementation files('jar/xj_commons.jar')
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

sourceSets {
    main {
        java {
            srcDir 'main/src'
        }
        resources {
			srcDir 'main/resources'
		}
    }
    test {
        java {
            srcDir 'test/src'
        }
        resources {
			srcDir 'test/resources'
		}
    }
}

tasks.withType(JavaCompile){
	options.encoding = 'UTF-8'
}

delete('META-INF/')
copy {
	from '../LICENSE'
	into 'META-INF/'
}

jar {
	archivesBaseName = 'ts_solver'
	from configurations.compileClasspath.collect{ it.isDirectory() ? it : zipTreeByCustom(it) }
}

copy {
	from 'build/libs/ts_solver.jar'
	into '../cmd/jar/'
}

eclipse.classpath.file {
     whenMerged { classpath ->
		classpath.entries.findAll{ it.kind == 'lib' }.each{ 
			it.entryAttributes['module'] = true 
		}
	}
}

FileTree zipTreeByCustom(File f){
	
	def layerArr = getLayerArr(f.toString())
	def plainKey = layerArr[layerArr.length-1]
	def splittedKey = plainKey.split('\\.'), keyStr = splittedKey[0]
	if(splittedKey.length != 1){
		def keyLength = plainKey.length() -1 -splittedKey[splittedKey.length-1].length()
		keyStr = plainKey.substring(0, keyLength)
	}
    
	def t = zipTree(f)
	def meta = t.matching{ include 'META-INF/**' }
	def classes = t.matching{ exclude 'META-INF/**' }
	
	def pjdirLayerLength = getLayerArr(getProjectDir().toString()).length
	def metainfLayers = Arrays.copyOfRange(getLayerArr(meta.iterator().next().toString()), pjdirLayerLength, pjdirLayerLength + 5)
	def metainfRelPath = String.join('/', metainfLayers)
	def newMetainfRelPath =  'META-INF/' + keyStr
	
	copy {
		into newMetainfRelPath
		from metainfRelPath
	}
    
	return classes
}

String[] getLayerArr(String path){
	def isWin = File.separator == '\\'
	return path.split(isWin ? '\\\\' : File.separator)
}
